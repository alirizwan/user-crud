import password from '../utils/password';
import s3 from '../utils/s3';

function init(models: any) {

  const select = ['id', 'firstName', 'lastName', 'username', 'avatar', 'createdAt', 'updatedAt'];

  const create = async (data: any) => {
    const existingUser = await get({username: data.username});

    if (existingUser.length) {
      throw Error('Another user with similar username already exist.');
    }

    const user = await models.User.create(data);

    console.log(user, data);

    user.password = await password.encrypt(data.password);
    user.avatar = `https://${s3.BUCKET}.s3.amazonaws.com/${data.username}`;

    const createdUser = await models.User.save(user);

    console.log(createdUser);
    
    return get({id: createdUser.id});
  };

  const update = async (id: string, data: any) => {
    const user = await get({id});

    delete data.username; // User shouldn't be able to change username
    delete data.password; // A separate api should be used to change password
    delete data.avatar; // User cannot update the url itself instead it's an autogenerated url

    await models.User.merge(user, data);
    await models.User.save(user);

    return get({id});
  };

  const remove = async (id: string) => {
    const user = await get({id});

    return models.User.remove(user);
  };

  const get = async (where: any) => {

    const users = await models.User.find({ where, select});

    if (where.id && !users.length) throw Error('Invalid id provided.');
    
    return where.id ? users[0] : users;
  };

  const uploadAvatar = async (id: string) => {
    const user = await get({id});

    return s3.signedUrl(user);
  };

  return {
    create,
    update,
    remove,
    get,
    uploadAvatar
  };
};

export default {init};